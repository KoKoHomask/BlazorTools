@page "/rsaTools"
@inject IJSRuntime JS
<h3>Rsa加密解密</h3>
<div class="input-group mb-3">
    <input @bind-value="@ip_KeyLen" type="text" class="form-control" placeholder="输入密钥长度">
    <button type="button" class="btn btn-primary" onclick="@btnClick">生成</button>
</div>
<div class="row">
    <div class="col-md-6">
       <label>公钥:              </label><br />
       <textarea style="width:100%;" @bind="@pubKey" ></textarea>

        <div class="input-group mb-3">
            <input @bind-value="@ip_EStr" type="text" class="form-control" placeholder="输入要加密内容">
            <button type="button" class="btn btn-primary" onclick="@btnEClick">使用公钥加密</button>
        </div>
        
    </div>
    <div class="col-md-6">
        <label>私钥</label>
        <textarea style="width:100%;" @bind="@prvKey"></textarea>
        
        <div class="input-group mb-3">
            <input @bind-value="@ip_DStr" type="text" class="form-control" placeholder="输入要解密内容">
            <button type="button" class="btn btn-primary" onclick="@btnDClick">使用私钥解密</button>
        </div>
       
    </div>
</div>

<div>
    <textarea id="resCalc" style="width:100%;" @bind="@res_RsaCalc"></textarea>
    <button class="btn btn-primary" onclick="@btnCClick">复制到剪贴板</button>
    <button class="btn btn-primary" onclick="@btnC2Click">复制到待解密区</button>
</div>


@code {
    //private IJSObjectReference module;
    static string rsaScriptInit()
    {
        return $@"
function rsaDecrypt(prvKey, text){{
    var key = KEYUTIL.getKey(prvKey);
    var maxLength = ((key.n.bitLength()+7)>>3)*2;
    var enc = b64tohex(text);
    //var dec = KJUR.crypto.Cipher.decrypt(enc, key);
    var dec='';
    var rexStr="".{{1,"" + maxLength  + ""}}"";
    var rex =new RegExp(rexStr, 'g');
    var subStrArray = enc.match(rex);
    
    if(subStrArray){{
        subStrArray.forEach(function(entry) {{
            console.log(hextob64(entry));
            var tmp = KJUR.crypto.Cipher.decrypt(entry, key);
            dec += tmp;
		}});
	}}
    return dec;
}}

function rsaEncrypt (pubKey, text)
{{
    var key = KEYUTIL.getKey(pubKey);
    //var enc = KJUR.crypto.Cipher.encrypt(text, key);
    //return hextob64(enc);
    var maxLength = ((key.n.bitLength()+7)>>3)-11;

    var subStr='', encryptedString = '';
	var subStart = 0, subEnd=0;
	var bitLen=0, tmpPoint=0;
    for(var i = 0, len = text.length; i < len; i++){{
        var charCode = text.charCodeAt(i);
        if(charCode <= 0x007f) {{bitLen += 1;
				}}else if(charCode <= 0x07ff){{bitLen += 2;
				}}else if(charCode <= 0xffff){{bitLen += 3;
				}}else{{bitLen += 4;
				}}
        if(bitLen>maxLength){{subStr = text.substring(subStart, subEnd)
                    console.log(subStr);
					encryptedString += KJUR.crypto.Cipher.encrypt(subStr, key);
					subStart=subEnd;
					bitLen=bitLen-tmpPoint;
				}}else{{subEnd = i;
					tmpPoint=bitLen;
				}}
}}
    subStr=text.substring(subStart,len)
    console.log(subStr);
	encryptedString += KJUR.crypto.Cipher.encrypt(subStr, key);
    return hextob64(encryptedString);  
}}
function rsaCreatekey(len)
{{
    var kp = KEYUTIL.generateKeypair(""RSA"", len);
    var prvKey = kp.prvKeyObj;
    var pub = KEYUTIL.getPEM(kp.pubKeyObj);
    var prv = KEYUTIL.getPEM(kp.prvKeyObj, 'PKCS8PRV');
    var keyArray = new Array();
    keyArray.push(prv);
    keyArray.push(pub);
    return keyArray;
}}
function copyToClipboard(eleID){{
    var text = document.getElementById(eleID);
    text.select();


    if (document.execCommand('copy')) 
    {{document.execCommand('copy');
         console.log('复制成功');
    }}
}}

";

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            string scriptContent;
            using (var stream = this.GetType().Assembly.GetManifestResourceStream(this.GetType().Assembly.GetName().Name + ".Pages.RsaTools.razor.js"))
            {
                using (var sr = new System.IO.StreamReader(stream))
                    scriptContent = await sr.ReadToEndAsync();
            }            
            //module = await JS.InvokeAsync<IJSObjectReference>("import", "data:text/javascript;base64," + Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(scriptContent)));
            await JS.InvokeVoidAsync("eval", scriptContent);
            await JS.InvokeVoidAsync("eval", rsaScriptInit());
        }

    }
    string res_RsaCalc { get; set; }//加密解密结果
    string ip_EStr{ get; set; }
    string ip_DStr { get; set; }
    string ip_KeyLen { get; set; } = "1024";
    string prvKey { get; set; } = "";
    string pubKey { get; set; } = "";
    async Task btnClick(EventArgs e)
    {
        string[] keyArray;
        if (int.TryParse(ip_KeyLen, out int len))
        {
            keyArray = await JS.InvokeAsync<string[]>("rsaCreatekey", len);
        }
        else
        {
            keyArray = await JS.InvokeAsync<string[]>("rsaCreatekey", 1024);
            ip_KeyLen = "1024";   
        }
        if (keyArray?.Length > 1)
        { 
            prvKey = keyArray[0];
            pubKey = keyArray[1];
        }
        StateHasChanged();
    }
    async Task btnEClick(EventArgs e)
    {       
        res_RsaCalc  = await JS.InvokeAsync<string>("rsaEncrypt", pubKey, ip_EStr);
        StateHasChanged();
    }
    async Task btnDClick(EventArgs e)
    {
        res_RsaCalc = await JS.InvokeAsync<string>("rsaDecrypt", prvKey, ip_DStr);
        StateHasChanged();
    }
    async Task btnCClick(EventArgs e)
    {
        await JS.InvokeVoidAsync("copyToClipboard", "resCalc");
    }
    Task btnC2Click(EventArgs e)
    {
        ip_DStr = res_RsaCalc;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
